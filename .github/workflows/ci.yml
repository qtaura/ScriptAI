name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Pin Black to avoid cross-version formatting diffs
        pip install pytest-cov flake8 mypy black==23.12.1
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports
    
    - name: Format check with black
      run: |
        black --version
        # Show exact diffs to identify reformat targets
        black --diff --check .
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: backend
        name: backend

    - name: Upload backend coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-py${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci

    - name: Run frontend unit tests with coverage (Vitest)
      working-directory: frontend
      run: |
        npm run test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: frontend/coverage/lcov.info
        flags: frontend
        name: frontend

    - name: Upload frontend coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

  e2e:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci

    - name: Install Playwright browsers
      working-directory: frontend
      run: |
        npx playwright install --with-deps

    - name: Start backend server for e2e
      env:
        RATELIMIT_STRICT_TEST: 1
      run: |
        nohup python app.py > backend.log 2>&1 &
        for i in {1..60}; do
          if curl -sSf http://127.0.0.1:5000/health > /dev/null; then
            echo "Backend ready"
            break
          fi
          sleep 2
        done

    - name: Run e2e tests (Playwright)
      working-directory: frontend
      run: |
        npm run test:e2e

    - name: Upload Playwright test results (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results
        path: frontend/test-results

    - name: Upload Playwright report (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: frontend/playwright-report

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    needs: [test, security, frontend, e2e]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Read VERSION
      id: version
      run: |
        echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Create GitHub Release and Upload Assets
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          Automated release from CI/CD pipeline
        generate_release_notes: true
        draft: false
        prerelease: false
        files: |
          dist/*.whl
          dist/*.tar.gz
