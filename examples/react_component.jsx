/**
 * Example: React Paginated List Component
 * Generated by ScriptAI
 * 
 * This component displays a paginated list of items fetched from an API endpoint.
 * It includes loading states, error handling, and pagination controls.
 */

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './PaginatedList.css';

const PaginatedList = ({ apiUrl, itemsPerPage = 10, title = 'Items' }) => {
  // State variables
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(0);

  // Fetch data from the API
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Make API request with pagination parameters
        const response = await axios.get(apiUrl, {
          params: {
            page: currentPage,
            limit: itemsPerPage
          }
        });
        
        // Update state with the fetched data
        setItems(response.data.items || response.data);
        
        // Calculate total pages if the API provides a total count
        if (response.data.total) {
          setTotalPages(Math.ceil(response.data.total / itemsPerPage));
        } else {
          // If the API doesn't provide a total, estimate based on current results
          setTotalPages(response.data.items?.length < itemsPerPage ? currentPage : currentPage + 1);
        }
        
        setLoading(false);
      } catch (err) {
        setError(`Failed to fetch data: ${err.message}`);
        setLoading(false);
      }
    };

    fetchData();
  }, [apiUrl, currentPage, itemsPerPage]);

  // Handle page change
  const handlePageChange = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage);
      // Scroll to top when changing pages
      window.scrollTo(0, 0);
    }
  };

  // Render pagination controls
  const renderPagination = () => {
    if (totalPages <= 1) return null;

    return (
      <div className="pagination">
        <button 
          onClick={() => handlePageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="pagination-button"
        >
          Previous
        </button>
        
        <span className="pagination-info">
          Page {currentPage} of {totalPages}
        </span>
        
        <button 
          onClick={() => handlePageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="pagination-button"
        >
          Next
        </button>
      </div>
    );
  };

  // Render loading state
  if (loading && items.length === 0) {
    return (
      <div className="paginated-list">
        <h2>{title}</h2>
        <div className="loading-indicator">Loading...</div>
      </div>
    );
  }

  // Render error state
  if (error && items.length === 0) {
    return (
      <div className="paginated-list">
        <h2>{title}</h2>
        <div className="error-message">{error}</div>
        <button onClick={() => handlePageChange(currentPage)} className="retry-button">
          Retry
        </button>
      </div>
    );
  }

  // Render empty state
  if (!loading && items.length === 0) {
    return (
      <div className="paginated-list">
        <h2>{title}</h2>
        <div className="empty-message">No items found</div>
      </div>
    );
  }

  // Render the list
  return (
    <div className="paginated-list">
      <h2>{title}</h2>
      
      {/* Item list */}
      <ul className="item-list">
        {items.map((item, index) => (
          <li key={item.id || index} className="list-item">
            <div className="item-title">{item.title || item.name || `Item ${index + 1}`}</div>
            {item.description && <div className="item-description">{item.description}</div>}
          </li>
        ))}
      </ul>
      
      {/* Show loading indicator when changing pages */}
      {loading && <div className="loading-indicator">Loading more items...</div>}
      
      {/* Pagination controls */}
      {renderPagination()}
    </div>
  );
};

export default PaginatedList;

// Example usage:
// <PaginatedList 
//   apiUrl="https://api.example.com/items" 
//   itemsPerPage={10} 
//   title="Products" 
// />